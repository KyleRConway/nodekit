<script>
  import { onMount, afterUpdate } from 'svelte'
  import { isMobile, fixInterfaceSizeOnMobile } from './utils'

  // Outlets
  let messageList
  let messageInput

  let messages = []
  let socket = null
  let online = false
  let nickname = 'Anonymous'
  let text = ''

  onMount(() => {
    // Initialise web socket.
    socket = new WebSocket(`wss://${window.location.hostname}/chat`)

    // Display connection state.
    socket.onopen = _ => { online = true }
    socket.onclose = _ => { online = false }

    // Handle received messages.
    socket.addEventListener('message', event => {
      const message = event.data
      messages = [...messages, JSON.parse(message)]
    })

    // Implement interface size fix on mobile.
    fixInterfaceSizeOnMobile()
  })

  // Make the message list auto scroll after DOM updates.
  afterUpdate (() => {
    messageList.scrollTop = messageList.scrollHeight
  })

  function sendMessage() {
    // Clear the message field and focus it if not on mobile.
    messageInput.value = ''
    if (!isMobile()) {
      // Focus the message text field but only on
      // desktop browsers. For mobile browsers, let the
      // person see the message they just sent by allowing
      // the field to lose focus.
      messageInput.focus()
    }

    // Send the message.
    const message = {nickname, text}
    messages = [...messages, message]
    socket.send(JSON.stringify(message))
  }
</script>

<h1><a href='https://github.com/small-tech/nodekit'>NodeKit</a> Simple Chat</h1>

<p>Status:
  <span id='status' class={online ? 'online' : 'offline'}>
    {online ? 'Online' : 'Offline'}
  </span>
</p>

<ul bind:this={messageList} id='messages'>
  {#each messages as message}
    <li><strong>{message.nickname}</strong> {message.text}</li>
  {/each}
</ul>

<form id='message-form' on:submit|preventDefault={sendMessage}>
  <label for='nickname'>Nickname:</label>
  <input id='nickname' bind:value={nickname} required>
  <label for='message'>Message:</label>
  <input bind:this={messageInput} id='message' bind:value={text} required>
  <button type='submit'>Send</button>
</form>

<style>
  .online {color: green}
  .offline {color: red}

  :global(*) { box-sizing: border-box; }

  /* We want the interface to take up the full browser canvas. */
  :global(#application) {
    display: flex;
    font-family: sans-serif;
    height: calc(var(--vh, 1vh) * 100 - 1em);
    flex-direction: column;
    flex-wrap: nowrap;
    justify-content: flex-start;
    align-content: stretch;
    align-items: flex-start;
    padding: 1em;
  }

  h1 {
    margin-top: 0;
    margin-bottom: 0;
  }

  p {
    margin-top: 0;
    margin-bottom: 0;
  }

  a {
    color: #334b4c;
  }

  form {
    background: #eee;
    display: grid;
    grid-template-columns: [labels] auto [controls] 1fr;
    align-items: center;
    grid-row-gap: 0.5em;
    grid-column-gap: 0.5em;
    padding: 0.75em;
    width: 100%;
  }

  form > label { grid-column: labels; }

  form > input, form > button {
    grid-column: controls;
    min-width: 6em;
    max-width: 300px;
    padding: 0.5em;
    font-size: 1em;
  }

  button {
    text-align: center;
    cursor: pointer;
    font-size:16px;
    color: white;
    border-radius: 4px;
    background-color:#466B6A;
    border: none;
    padding: 0.75em;
    padding-top: 0.25em;
    padding-bottom: 0.25em;
    transition: color 0.5s;
    transition: background-color 0.5s;
  }

  button:hover {
    color: black;
    background-color: #92AAA4;
  }

  button:disabled {
    color: #999;
    background-color: #ccc;
  }

  #messages {
    list-style: none;
    width: 100%;
    flex: 100 1 auto;
    align-self: stretch;
    overflow-y: scroll;
    background-color: #eee;
    padding: 0.75em;
  }
</style>
